{
    "for": {
        "prefix": "for",
        "body": [
            "for {set ${1:index} ${2:0}} {\\$${1:index} < ${3:length}} {incr ${1:index}} {",
            "\t$0",
            "}"
        ],
        "description": "For Loop"
    },
    "foreach": {
        "prefix": "foreach",
        "body": [
            "foreach ${1:var} ${2:list} {",
            "\t$0",
            "}"
        ],
        "description": "Foreach Loop"
    },
    "if": {
        "prefix": "if",
        "body": [
            "if {${1:var}} {",
            "\t$0",
            "}"
        ],
        "description": "If Condition"
    },
    "elseif": {
        "prefix": "elseif",
        "body": [
            "elseif {${1:var}} {",
            "\t$0",
            "}"
        ],
        "description": "ElseIf Condition"
    },
    "else": {
        "prefix": "else",
        "body": [
            "else {",
            "\t$0",
            "}"
        ],
        "description": "Else Block"
    },
    "proc": {
        "prefix": "proc",
        "body": [
            "proc ${1:name} {${2:args}} {",
            "\t$0",
            "}"
        ],
        "description": "Proc Block"
    },
    "while": {
        "prefix": "while",
        "body": [
            "while {${1:var}} {",
            "\t$0",
            "}"
        ],
        "description": "While Loop"
    },
    "try": {
        "prefix": "try",
        "body": [
            "try {",
            "\t$1",
            "} finally {",
            "\t$0",
            "}"
        ],
        "description": "Try Block"
    },
    "switch": {
        "prefix": "switch",
        "body": [
            "switch ${1:var} {",
            "\t${2:case} {$3}",
            "\tdefault {$0}",
            "}"
        ],
        "description": "Switch Block"
    },
    "oo::class create": {
        "prefix": "oo::class create",
        "body": [
            "oo::class create ${1:name} {",
            "\t${2:superclass s}",
            "\tconstructor {} {",
            "\t\t$3",
            "\t}",
            "\tmethod ${4:m} {} {",
            "\t\t$0",
            "\t}",
            "}"
        ],
        "description": "Class Create"
    },
    "tk_chooseDirectory": {
        "prefix": "tk_chooseDirectory",
        "body": [
            "tk_chooseDirectory ${-initialdir dirname -mustexist boolean -title titleString}"
        ],
        "description": "Choose Directory"
    },
    "tk_getOpenFile": {
        "prefix": "tk_getOpenFile",
        "body": [
            "tk_getOpenFile -filetypes {",
            "\t\t{{Text Files}       {.txt}        }",
            "\t\t{{All Files}        *             }",
            "\t}"
        ],
        "description": "Open File Dialog"
    },
    "tk_getSaveFile": {
        "prefix": "tk_getSaveFile",
        "body": [
            "tk_getSaveFile -filetypes {",
            "\t\t{{Text Files}       {.txt}        }",
            "\t\t{{All Files}        *             }",
            "\t}"
        ],
        "description": "Save File Dialog"
    },
    "tk_messageBox": {
        "prefix": "tk_messageBox",
        "body": [
            "tk_messageBox ${-message msg}"
        ],
        "description": "Message Box"
    },
    "catch": {
        "prefix": "catch",
        "body": [
            "catch {",
            "\tif { [catch {",
            "\t\t$1",
            "} errorInfo] } {",
            "\t\t::Log::FwLog \\",
            "\t\t\t-level  [::LConst::LVL_ERROR] \\",
            "\t\t\t-msg    \\$errorInfo",
            "\t}",
            "} ${2:var}"
        ],
        "description": "Catch Block"
    },
    "L1": {
        "prefix": "L1",
        "body": [
            "########################################################################",
            "# method ${1:name}",
            "",
            "# ${3:description}",
            "#",
            "# author ${2:author}",
            "#",
            "# @param  action         (in) What to do.  Valid choices are:",
            "#                             [::Const::CFG_ADD] to add",
            "#                          or [::Const::CFG_REMOVE] to remove",
            "# @param  rtrObj         (in) The object reference of the router.",
            "# @param  #REQ_PARAM#    (in) Description for required parameter.",
            "# @param  #OPT_PARAM#    (in) Description for optional parameter.",
            "# @param  #OPT_KEYWORD#  (in) Description for optional keyword.",
            "# @param  mgmtPrtcl      (in) Management protocol to use for this router access.",
            "#                             By default the current router object",
            "#                             default management protocol is used.",
            "# @return",
            "proc ::L1::${1:name} {} {",
            "\t::Log::FwMethodStart",
            "",
            "\t# Specify the list of args for this method",
            "\t# Replace reqparam, optparam, optkeyword placeholders, and add as needed",
            "\tset _argsFormatList [list -action        \"_\" \\",
            "\t                          -rtrObj        \"_\" \\",
            "\t                          -#REQ_PARAM#   \"_\" \\",
            "\t                          -#OPT_PARAM#   \"\"  \\",
            "\t                          -#OPT_KEYWORD# \"\"  \\",
            "\t                          -mgmtPrtcl     [::Const::ITF_SEMP]]",
            "",
            "\t# Check the args list line",
            "\tarray set _argsArray [::GenUtils::Check::InputArgs \\$_argsFormatList \\$args]",
            "",
            "\tset _mgmtPrtcl \\$_argsArray(-mgmtPrtcl)",
            "",
            "\t# Set \\$_noStart and \\$_noEnd with \"create\" or \"no\" tags based on action for create command",
            "\t_CheckForNoOrCreate \\$_argsArray(-action) _noStart _noEnd _argsArray(-mgmtPrtcl)",
            "\t# OR",
            "\t# Set \\$_noStart and \\$_noEnd with nothing or \"no\" tags based on action for non-create command",
            "\t_CheckForNo \\$_argsArray(-action) _noStart _noEnd _argsArray(-mgmtPrtcl)",
            "",
            "\t# Make the XML for command",
            "\tset _xmlCmdStr \"",
            "\t    [::Const::SEMP_RPC_START_TAG]",
            "\t        # Replace the following with actual semp command using cli-to-semp output as a reference",
            "\t        <object>",
            "\t            # Force tags for required parameters",
            "\t            <name>\\$argsArray(-#REQ_PARAM#)</name>",
            "\t            # Use helper method to insert optional keyword (i.e. <#OPT_KEYWORD#/>)",
            "\t            [::UtilsForL1::OptKeywordXML \\$_argsArray(-#OPT_KEYWORD#)]",
            "\t            <type>",
            "\t                # Use \\$_noStart where applicable",
            "\t                \\$_noStart",
            "\t                    <property>",
            "\t                        # Use helper method to insert optional parameter (i.e. <name>#OPT_PARAM#</name>)",
            "\t                        [::UtilsForL1::OptParamXML param_name \\$_argsArray(-#OPT_PARAM#)]",
            "\t                    </property>",
            "\t                # Use \\$_noEnd where applicable",
            "\t                \\$_noEnd",
            "\t            </type>",
            "\t        </object>",
            "\t    [::Const::SEMP_RPC_END_TAG]\"",
            "",
            "\t# Send the command",
            "\t[\\$::autEnvMgr_g GetIntFwApi] SetRtrCfg \\$_argsArray(-rtrObj) \\",
            "\t                                           \\$_xmlCmdStr \\",
            "\t                                           \\$_mgmtPrtcl",
            "",
            "} ;# End of ${1:name}"
        ],
        "description": "Method Template"
    },
    "Section_${1:number}_${2:testCategory}_${3:attributeNum}": {
        "prefix": "Section_${1:number}_${2:testCategory}_${3:attributeNum}",
        "body": [
            "public method Section_${1:number}_${2:testCategory}_${3:attributeNum} {} {",
            "\t::L1::Test::ActionStart \"[Section] - ${4:tcDescription}\"",
            "",
            "\t##### action setup #####",
            "\t::L1::Test::Result  [::Const::LOG_RESULTS_INFO] \"##### action setup #####\"",
            "",
            "\t##### action test #####",
            "\t::L1::Test::Result  [::Const::LOG_RESULTS_INFO] \"##### action test #####\"",
            "",
            "\t##### action cleanup #####",
            "\t::L1::Test::Result  [::Const::LOG_RESULTS_INFO] \"##### action cleanup #####\"",
            "",
            "\t\t::L1::Test::ActionEnd",
            "} ;# End of Section_${1:number}_${2:testCategory}_${3:attributeNum}"
        ],
        "description": "Section Test Case"
    },
    "Section_${1:number}_${2:name}": {
        "prefix": "Section_${1:number}_${2:name}",
        "body": [
            "########################################################################",
            "# method Section_${1:number}_${2:name}",
            "#",
            "# ${4:description}",
            "#",
            "# author ${3:author}",
            "#",
            "# @return",
            "public method Section_${1:number}_${2:name} {} {",
            "\t::Log::FwMethodStart",
            "",
            "",
            "} ;# End of Section_${1:number}_${2:name}"
        ],
        "description": "Section"
    }
}